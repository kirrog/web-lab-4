package dao;

import beansLab.entities.User;
import beansLab.entities.Shot;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.Query;
import utils.HibernateSessionFactoryUtil;
import java.util.List;

public class UserDao {

    public UserDao(){
        createAllParts();
    }

    public User findById(int id) {
        return HibernateSessionFactoryUtil.getSessionFactory().openSession().get(User.class, id);
    }

    public void save(User user) {
        Session session = HibernateSessionFactoryUtil.getSessionFactory().openSession();
        Transaction tx1 = session.beginTransaction();
        session.save(user);
        tx1.commit();
        session.close();
    }

    public void update(User user) {
        Session session = HibernateSessionFactoryUtil.getSessionFactory().openSession();
        Transaction tx1 = session.beginTransaction();
        session.update(user);
        tx1.commit();
        session.close();
    }

    public void delete(User user) {
        Session session = HibernateSessionFactoryUtil.getSessionFactory().openSession();
        Transaction tx1 = session.beginTransaction();
        session.delete(user);
        tx1.commit();
        session.close();
    }

    public Shot findShotById(int id) {
//        Session session = HibernateSessionFactoryUtil.getSessionFactory().openSession();
//        Query query =  session.createQuery(("select s from shots s where s.id = " + id));
//        List list = query.getResultList();
//        session.close();
//        Shot shot = (Shot) list.get(0);
//        return shot;
        return HibernateSessionFactoryUtil.getSessionFactory().openSession().get(Shot.class, id);
    }

    public List<User> findAll() {
        List<User> users = HibernateSessionFactoryUtil.getSessionFactory().openSession().createQuery("FROM User", User.class).list();
        return users;
    }



    private static String tableUserCheck = "Select * from user_objects where Object_Name = 'USERS'";
    private static String tableShotsCheck = "Select * from user_objects where Object_Name = 'SHOTS'";
    private static String seqUserCheck = "Select * from user_objects where Object_Name = 'SEQ_USER'";
    private static String seqShotCheck = "Select * from user_objects where Object_Name = 'SEQ_SHOT'";

    private static String tableUsers = "CREATE TABLE users(\n" +
            "\tuser_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, \n" +
            "\tlogin VARCHAR2( 255 ) NOT NULL,\n" +
            "\tpassword VARCHAR2( 255 ) NOT NULL\n" +
            ")\n";

    private static String tableShots = "CREATE TABLE shots (\n" +
            "\tshot_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n" +
            "\tx BINARY_FLOAT NOT NULL,\n" +
            "\ty BINARY_FLOAT NOT NULL,\n" +
            "\tr BINARY_FLOAT NOT NULL, \n" +
            "\trg NUMBER NOT NULL,\n" +
            "\tstart_time VARCHAR2( 20 ) NOT NULL,\n" +
            "\tscript_time LONG NOT NULL, \n" +
            "\tuser_id NUMBER NOT NULL,\n" +
            "\tFOREIGN KEY(user_id) REFERENCES users(user_id)\n" +
            "\t)\n";

    private static String seqUser = "create sequence SEQ_USER\n" +
            "minvalue 1\n" +
            "start with 1\n" +
            "increment by 1\n" +
            "cache 2\n";

    private static String seqShot = "create sequence SEQ_SHOT\n" +
            "minvalue 1\n" +
            "start with 1\n" +
            "increment by 1\n" +
            "cache 2\n";

    private void createAllParts(){
        try{
            createSeqUser();
            createSeqShot();
            createTableUser();
            createTableShot();
        }catch (Exception ex){
            ex.printStackTrace();
        }

    }

    private void createSeqUser(){
        Session session = HibernateSessionFactoryUtil.getSessionFactory().openSession();
        Transaction tx1 = session.beginTransaction();
        Query query =  session.createSQLQuery(seqUserCheck);
        List list = query.list();
        if(list.size() == 0){
            Query queryCreate =  session.createSQLQuery(seqUser);
            queryCreate.executeUpdate();
        }
        tx1.commit();
        session.close();
    }

    private void createSeqShot(){
        Session session = HibernateSessionFactoryUtil.getSessionFactory().openSession();
        Transaction tx1 = session.beginTransaction();
        Query query =  session.createSQLQuery(seqShotCheck);
        List list = query.list();
        if(list.size() == 0){
            Query queryCreate =  session.createSQLQuery(seqShot);
            queryCreate.executeUpdate();
        }
        tx1.commit();
        session.close();
    }

    private void createTableUser(){
        Session session = HibernateSessionFactoryUtil.getSessionFactory().openSession();
        Transaction tx1 = session.beginTransaction();
        Query query =  session.createSQLQuery(tableUserCheck);
        List list = query.list();
        if(list.size() == 0){
            Query queryCreate =  session.createSQLQuery(tableUsers);
            queryCreate.executeUpdate();
        }
        tx1.commit();
        session.close();
    }

    private void createTableShot(){
        Session session = HibernateSessionFactoryUtil.getSessionFactory().openSession();
        Transaction tx1 = session.beginTransaction();
        Query query =  session.createSQLQuery(tableShotsCheck);
        List list = query.list();
        if(list.size() == 0){
            Query queryCreate =  session.createSQLQuery(tableShots);
            queryCreate.executeUpdate();
        }
        tx1.commit();
        session.close();
    }
}